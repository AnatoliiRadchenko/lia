---
# tasks file for android_studio
- name: Install Block
  vars:
    ansible_user_run: "{{lookup('env', 'USER')}}"
  block:
    - name: Scarica la pagina web e salvala in un file
      shell: curl -s https://developer.android.com/studio > androidstudio.html
      args:
        chdir: /tmp

    - name: Estrapola il contenuto dal file salvato
      shell: cat /tmp/androidstudio.html | sed -n 's/.*android-studio-\([0-9.]*\).*/\1/p'|tail -n 1
      register: android_version_stdout

    - name: Mostra la versione estratta
      debug:
        var: android_version_stdout.stdout
#    - name: Check if i386 is enabled
      # shell because the ansible.builtin.dpkg_selections command does only support selection in Ansible. And command does not allow piping
#      ansible.builtin.shell:
#        cmd: dpkg --print-foreign-architectures | grep i386
#      register: result_i386_check
#      changed_when: result_i386_check.rc == 1
#      failed_when: result_i386_check.rc > 1
#      when: ansible_architecture == "x86_64"

#    - name: Enable i386 architecture
      # command because the ansible.builtin.dpkg_selections command does only support selection in Ansible.
#      ansible.builtin.command:
#        cmd: dpkg --add-architecture i386
#      register: add_architecture_output
#      changed_when: add_architecture_output.rc != 0
#      when: result_i386_check.rc != 0

#    - name: Update apt cache
#      ansible.builtin.apt:
#        update_cache: true
#        cache_valid_time: 0
#      when: add_architecture_output and ansible_os_family == "Debian"

#    - name: Install required libraries for 64-bit machines
#      ansible.builtin.package:
#        name:
#          - libc6:i386
#          - libncurses5:i386
#          - libstdc++6:i386
#          - lib32z1
#          - libbz2-1.0:i386
#        state: present
#      when: ansible_architecture == "x86_64"

    - name: Create Android-Studio download dir on remote host if it does not exist
      ansible.builtin.file:
        path: "{{ download_dir_on_remote_host }}/android_studio"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0755'

    - name: Check if file exists
      stat:
        path: "{{ download_dir_on_remote_host }}/android_studio/android-studio-{{ android_version_stdout.stdout }}-linux.tar.gz"
      register: dowloaded_file

    - name: Check if dir exists
      stat:
        path: "/opt/android-studio"
      register: unzip_dir

    - name: Download installer
      become: true
      become_user: "{{ ansible_user_id }}"
      ansible.builtin.get_url:
        url: "https://redirector.gvt1.com/edgedl/android/studio/ide-zips/{{ android_version_stdout.stdout }}/android-studio-{{ android_version_stdout.stdout }}-linux.tar.gz"
        dest: "{{ download_dir_on_remote_host }}/android_studio/android-studio-{{ android_version_stdout.stdout }}-linux.tar.gz"
        #checksum: "{{ android_studio.checksum }}"
        timeout: 60
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0644'
      when: not dowloaded_file.stat.exists
      register: android_studio_installer

    - name: Clean destination folder if needed
      ansible.builtin.file:
        path: "/opt/android-studio"
        state: absent
      when: android_studio_installer.changed or not unzip_dir.stat.exists 

    - name: Execute installer
      ansible.builtin.unarchive:
        src: "{{ download_dir_on_remote_host }}/android_studio/android-studio-{{ android_version_stdout.stdout }}-linux.tar.gz"
        dest: "/opt/"
        remote_src: true
      when: android_studio_installer.changed or not unzip_dir.stat.exists
    - name: Create symbolic link 
      file:
        src: /opt/android-studio/bin/studio.sh
        dest: "/usr/local/bin/studio.sh"
        state: link
